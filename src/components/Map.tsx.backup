'use client';

import { useEffect, useRef } from 'react';
import { ledScreens, LEDScreen } from '@/data/ledScreens';

interface MapProps {
  selectedCity: string;
  selectedScreens?: string[];
  dateRange?: {from: string; to: string} | null;
  onClearFilter?: () => void;
  onSelectScreen?: (screenName: string) => void;
  onDateRangeChange?: (from: string, to: string) => void;
}

export default function Map({ selectedCity, selectedScreens, dateRange, onClearFilter, onSelectScreen, onDateRangeChange }: MapProps) {
  const mapRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    const initMap = () => {
      if (!mapRef.current || typeof window === 'undefined') return;

      const L = (window as any).L;
      if (!L) return;

      // Remove existing map if any
      if ((window as any).mapInstance) {
        (window as any).mapInstance.remove();
      }

      // Initialize map centered on Lithuania
      const map = L.map(mapRef.current).setView([55.1694, 23.8813], 7);
      (window as any).mapInstance = map;

      // Add OpenStreetMap tile layer
      L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '© OpenStreetMap contributors'
      }).addTo(map);

      // Filter screens by selected city
      const filteredScreens = selectedCity === 'Regionai' 
        ? ledScreens.filter(screen => !['Vilnius', 'Kaunas', 'Klaipėda', 'Šiauliai', 'Panevėžys'].includes(screen.city))
        : ledScreens.filter(screen => screen.city === selectedCity);

      // Create custom LED screen icon function
      const createLedScreenIcon = (isSelected: boolean, hasLastMinute: boolean, lastMinuteDate?: string, isDoubleSided?: boolean) => L.divIcon({
        className: 'led-screen-marker',
        html: `
          <div style="
            width: 33px; 
            height: 33px; 
            position: relative;
            display: flex; 
            align-items: center; 
            justify-content: center;
          ">
            <!-- Outer ring - Green if selected, Blue if not -->
            <div style="
              width: 33px; 
              height: 33px; 
              background: ${isSelected ? '#10b981' : '#2563eb'}; 
              border: 3px solid white; 
              border-radius: 50%; 
              box-shadow: 0 2px 8px rgba(0,0,0,0.3);
              position: absolute;
            "></div>
            <!-- Inner dot - White -->
            <div style="
              width: 9px; 
              height: 9px; 
              background: white; 
              border-radius: 50%; 
              position: absolute;
              z-index: 1;
            "></div>
            ${hasLastMinute ? `
            <!-- Last Minute Badge -->
            <div style="
              position: absolute;
              top: 50%;
              right: -85px;
              transform: translateY(-50%);
              background: #ef4444;
              color: white;
              font-size: 10px;
              font-weight: bold;
              padding: 3px 5px;
              border-radius: 5px;
              white-space: nowrap;
              box-shadow: 0 1px 3px rgba(0,0,0,0.3);
              z-index: 10;
              animation: pulse 2s infinite;
            ">LAST MINUTE</div>
            <!-- Date Badge -->
            <div style="
              position: absolute;
              top: 50%;
              right: -85px;
              transform: translateY(calc(-50% + 25px));
              background: #1f2937;
              color: white;
              font-size: 10px;
              font-weight: bold;
              padding: 3px 5px;
              border-radius: 5px;
              white-space: nowrap;
              box-shadow: 0 1px 3px rgba(0,0,0,0.3);
              z-index: 10;
            ">iki ${lastMinuteDate || '2025-08-25'}</div>
            ` : ''}
            ${isDoubleSided ? `
            <!-- Double Sided Badge -->
            <div style="
              position: absolute;
              top: 50%;
              left: -85px;
              transform: translateY(-50%);
              background: #8b5cf6;
              color: white;
              font-size: 10px;
              font-weight: bold;
              padding: 3px 5px;
              border-radius: 5px;
              white-space: nowrap;
              box-shadow: 0 1px 3px rgba(0,0,0,0.3);
              z-index: 10;
            ">DVIPUSIS</div>
            ` : ''}
          </div>
        `,
        iconSize: [33, 33],
        iconAnchor: [16.5, 16.5],
        popupAnchor: [0, -16.5]
      });

      // Add markers for filtered screens
      filteredScreens.forEach((screen) => {
        const isSelected = selectedScreens && selectedScreens.includes(screen.name);
        const hasLastMinute = screen.lastMinute || false;
        
        if (screen.isDoubleSided) {
          console.log('Creating double-sided markers for:', screen.name, 'at coordinates:', screen.coordinates);
          
          // Create custom icon with rounded rectangle and two white circles
          const createDoubleSidedIcon = (isSelected: boolean, hasLastMinute: boolean, lastMinuteDate?: string) => L.divIcon({
            className: 'double-sided-marker',
            html: `
              <div style="position: relative;">
                <!-- Main rounded rectangle -->
                <div style="
                  width: 60px; 
                  height: 30px; 
                  background: ${isSelected ? '#10b981' : '#2563eb'}; 
                  border: 3px solid white; 
                  border-radius: 15px; 
                  box-shadow: 0 2px 8px rgba(0,0,0,0.3);
                  position: relative;
                  display: flex;
                  align-items: center;
                  justify-content: space-around;
                  padding: 0 8px;
                ">
                  <!-- First white circle -->
                  <div style="
                    width: 9px; 
                    height: 9px; 
                    background: white; 
                    border-radius: 50%; 
                  "></div>
                  
                  <!-- Second white circle -->
                  <div style="
                    width: 9px; 
                    height: 9px; 
                    background: white; 
                    border-radius: 50%; 
                  "></div>
                </div>
                
                ${hasLastMinute ? `
                <!-- Last Minute Badge -->
                <div style="
                  position: absolute;
                  top: 50%;
                  right: -85px;
                  transform: translateY(-50%);
                  background: #ef4444;
                  color: white;
                  font-size: 10px;
                  font-weight: bold;
                  padding: 3px 5px;
                  border-radius: 5px;
                  white-space: nowrap;
                  box-shadow: 0 1px 3px rgba(0,0,0,0.3);
                  z-index: 10;
                  animation: pulse 2s infinite;
                ">LAST MINUTE</div>
                <!-- Date Badge -->
                <div style="
                  position: absolute;
                  top: 50%;
                  right: -85px;
                  transform: translateY(calc(-50% + 25px));
                  background: #1f2937;
                  color: white;
                  font-size: 10px;
                  font-weight: bold;
                  padding: 3px 5px;
                  border-radius: 5px;
                  white-space: nowrap;
                  box-shadow: 0 1px 3px rgba(0,0,0,0.3);
                  z-index: 10;
                ">iki ${lastMinuteDate || '2025-08-25'}</div>
                ` : ''}
              </div>
            `,
            iconSize: [60, 30],
            iconAnchor: [30, 15],
            popupAnchor: [0, -15]
          });
          
          // Single marker with double-sided icon
          const marker = L.marker([screen.coordinates[0], screen.coordinates[1]], {
            icon: createDoubleSidedIcon(isSelected, hasLastMinute, screen.lastMinuteDate)
          })
            .addTo(map)
            .bindPopup(`
              <div style="display: flex; gap: 5px; font-family: Inter, sans-serif;">
                <!-- First popup - North side -->
                <div style="width: 291px; border-radius: 8px; overflow: visible; background: white; box-shadow: 0 4px 12px rgba(0,0,0,0.15);">
                  <div style="position: relative;">
                    <img src="/Compensa.jpg" alt="${screen.name} - Šiaurė"
                         style="width: 100%; height: 188px; object-fit: cover;"/>
                    <button onclick="this.closest('.leaflet-popup').remove()" style="position: absolute; top: 8px; right: 8px; background: rgba(0,0,0,0.6); color: white; border: none; border-radius: 50%; width: 24px; height: 24px; display: flex; align-items: center; justify-content: center; font-size: 14px; cursor: pointer; z-index: 10;">×</button>
                  </div>
                  <div style="padding: 12px; position: relative;">
                    <h3 style="margin: 0 0 4px 0; font-size: 16px; font-weight: 600; color: #1f2937;">
                      ${screen.name} - Šiaurė
                    </h3>
                    <p style="margin: 0 0 4px 0; font-size: 14px; color: #6b7280;">
                      <span style="font-weight: 600;">Adresas:</span> ${screen.address}
                    </p>
                    <p style="margin: 0 0 12px 0; font-size: 12px; color: #9ca3af;">
                      ${screen.city}${screen.district ? ', ' + screen.district : ''}
                    </p>
                    <div style="display: flex; justify-content: space-between; align-items: center; gap: 8px;">
                      <button onclick="window.selectScreen('${screen.name} - Šiaurė')"
                                       style="background: ${selectedScreens && selectedScreens.includes(screen.name + ' - Šiaurė') ? '#f3f4f6' : '#f9fafb'}; color: #374151; border: 1px solid #e5e7eb;
                                              padding: 8px 16px; border-radius: 6px; font-size: 14px; cursor: pointer;
                                              transition: background-color 0.2s; flex: 1; min-width: 0; width: 100%;">
                        ${selectedScreens && selectedScreens.includes(screen.name + ' - Šiaurė') ? '✓ Pridėtas' : '+ Pridėti'}
                      </button>
                      <button onclick="window.open('/ekranas/${screen.id}', '_blank')"
                                       style="background: #f9fafb; color: #374151; border: 1px solid #e5e7eb;
                                              padding: 8px 16px; border-radius: 6px; font-size: 14px; cursor: pointer;
                                              transition: background-color 0.2s; flex: 1; min-width: 0; width: 100%;
                                              position: relative;"
                                       onmouseenter="this.parentElement.nextElementSibling.style.display='block'"
                                       onmouseleave="this.parentElement.nextElementSibling.style.display='none'">
                        Info
                      </button>
                    </div>
                    <div style="display: none; position: absolute; bottom: 100%; top: -120px; right: -200px; 
                                 background: #1f2937; color: white; padding: 8px 12px; border-radius: 6px; 
                                 font-size: 12px; font-weight: bold; white-space: nowrap; z-index: 999999; margin-bottom: 5px;
                                 box-shadow: 0 4px 12px rgba(0,0,0,0.3);">
                      Srautas per savaitę: 364 140<br/>
                      Dienos kaina nuo: 72.00 €<br/>
                      Dydis: 8 x 4 m<br/>
                      Raiška: 1152 × 576
                    </div>
                  </div>
                </div>
                
                <!-- Second popup - South side -->
                <div style="width: 291px; border-radius: 8px; overflow: visible; background: white; box-shadow: 0 4px 12px rgba(0,0,0,0.15);">
                  <div style="position: relative;">
                    <img src="/Senukai.jpg" alt="${screen.name} - Pietūs"
                         style="width: 100%; height: 188px; object-fit: cover;"/>
                    <button onclick="this.closest('.leaflet-popup').remove()" style="position: absolute; top: 8px; right: 8px; background: rgba(0,0,0,0.6); color: white; border: none; border-radius: 50%; width: 24px; height: 24px; display: flex; align-items: center; justify-content: center; font-size: 14px; cursor: pointer; z-index: 10;">×</button>
                  </div>
                  <div style="padding: 12px; position: relative;">
                    <h3 style="margin: 0 0 4px 0; font-size: 16px; font-weight: 600; color: #1f2937;">
                      ${screen.name} - Pietūs
                    </h3>
                    <p style="margin: 0 0 4px 0; font-size: 14px; color: #6b7280;">
                      <span style="font-weight: 600;">Adresas:</span> ${screen.address}
                    </p>
                    <p style="margin: 0 0 12px 0; font-size: 12px; color: #9ca3af;">
                      ${screen.city}${screen.district ? ', ' + screen.district : ''}
                    </p>
                    <div style="display: flex; justify-content: space-between; align-items: center; gap: 8px;">
                      <button onclick="window.selectScreen('${screen.name} - Pietūs')"
                                       style="background: ${selectedScreens && selectedScreens.includes(screen.name + ' - Pietūs') ? '#f3f4f6' : '#f9fafb'}; color: #374151; border: 1px solid #e5e7eb;
                                              padding: 8px 16px; border-radius: 6px; font-size: 14px; cursor: pointer;
                                              transition: background-color 0.2s; flex: 1; min-width: 0; width: 100%;">
                        ${selectedScreens && selectedScreens.includes(screen.name + ' - Pietūs') ? '✓ Pridėtas' : '+ Pridėti'}
                      </button>
                      <button onclick="window.open('/ekranas/${screen.id}', '_blank')"
                                       style="background: #f9fafb; color: #374151; border: 1px solid #e5e7eb;
                                              padding: 8px 16px; border-radius: 6px; font-size: 14px; cursor: pointer;
                                              transition: background-color 0.2s; flex: 1; min-width: 0; width: 100%;
                                              position: relative;"
                                       onmouseenter="this.parentElement.nextElementSibling.style.display='block'"
                                       onmouseleave="this.parentElement.nextElementSibling.style.display='none'">
                        Info
                      </button>
                    </div>
                    <div style="display: none; position: absolute; bottom: 100%; top: -120px; right: -200px; 
                                 background: #1f2937; color: white; padding: 8px 12px; border-radius: 6px; 
                                 font-size: 12px; font-weight: bold; white-space: nowrap; z-index: 999999; margin-bottom: 5px;
                                 box-shadow: 0 4px 12px rgba(0,0,0,0.3);">
                      Srautas per savaitę: 364 140<br/>
                      Dienos kaina nuo: 72.00 €<br/>
                      Dydis: 8 x 4 m<br/>
                      Raiška: 1152 × 576
                    </div>
                  </div>
            </div>
          </div>
        `);
        } else {
          // Single marker for regular screens
          const marker = L.marker([screen.coordinates[0], screen.coordinates[1]], {
            icon: createLedScreenIcon(isSelected, hasLastMinute, screen.lastMinuteDate, false)
          })
            .addTo(map)
            .bindPopup(`
              <div style="font-family: ui-sans-serif, system-ui, -apple-system, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, 'Noto Sans', sans-serif; width: 780px; height: 468px; border-radius: 0; overflow: visible; background: transparent; display: flex; gap: -8px; position: relative;">
                <!-- Photo -->
                <div style="width: 468px; height: 468px; position: relative; background: #ddd; border-radius: 9px 0 0 9px !important; overflow: hidden;">
                  <img src="${screen.image}" alt="${screen.name}"
                       style="width: 468px; height: 468px; object-fit: cover;"/>
                </div>
                
                <!-- Card -->
                <div style="width: 270px; height: 468px; background: #ffffff; border-radius: 0 13px 13px 0; box-shadow: 0 13px 31px rgba(0,0,0,0.08); padding: 42px 42px 36px; display: flex; flex-direction: column; gap: 23px;">
                  <!-- Header -->
                  <header>
                    <h1 style="font-weight: 800; font-size: 28px; margin: 0; color: #111827;">${screen.name}</h1>
                    <p style="color: #6b7280; margin: 0 0 8px 0; font-size: 16px;">${screen.address}</p>
                  </header>
                  
                  <!-- Specs -->
                  <div style="margin-top: 4px; border-top: 1px solid #e5e7eb;">
                    <div style="display: flex; justify-content: space-between; align-items: center; padding: 14px 0; border-bottom: 1px solid #e5e7eb; font-size: 16px;">
                      <span style="color: #6b7280;">Dydis</span>
                      <span style="font-weight: 800; color: #111827;">8x4</span>
                    </div>
                    <div style="display: flex; justify-content: space-between; align-items: center; padding: 14px 0; border-bottom: 1px solid #e5e7eb; font-size: 16px;">
                      <span style="color: #6b7280;">Raiška</span>
                      <span style="font-weight: 800; color: #111827;">1152x576</span>
                    </div>
                    <div style="display: flex; justify-content: space-between; align-items: center; padding: 14px 0; border-bottom: 1px solid #e5e7eb; font-size: 16px;">
                      <span style="color: #6b7280;">Srautas</span>
                      <span style="font-weight: 800; color: #111827;">300.258</span>
                    </div>
                    <div style="display: flex; justify-content: space-between; align-items: center; padding: 14px 0; font-size: 16px;">
                      <span style="color: #6b7280;">Kaina</span>
                      <span style="font-weight: 800; color: #111827;">70 EUR</span>
                    </div>
                  </div>
                  
                  <!-- Button -->
                  <div style="display: flex; justify-content: center; padding-top: 8px;">
                    <button onclick="window.selectScreen('${screen.name}')"
                                     style="appearance: none; border: 1px solid #d1d5db; background: #f9fafb; padding: 8px 12px; border-radius: 6px; font-weight: 500; cursor: pointer; font-size: 14px; color: #4b5563; transition: background-color 0.2s;">
                      ${selectedScreens && selectedScreens.includes(screen.name) ? '✓ Pridėtas' : '+ Pridėti'}
                    </button>
                  </div>
                </div>
                
                <!-- Close Button -->
                <button onclick="this.closest('.leaflet-popup').remove()" 
                        style="position: absolute; top: 16px; right: 16px; background: rgba(0,0,0,0.6); color: white; border: none; border-radius: 50%; width: 36px; height: 36px; display: flex; align-items: center; justify-content: center; font-size: 20px; cursor: pointer; z-index: 10;">×</button>
              </div>
            `);
        }
      });

      // Fit map to show all markers
      if (filteredScreens.length > 0) {
        const markers = [];
        filteredScreens.forEach(screen => {
          const isSelected = selectedScreens && selectedScreens.includes(screen.name);
          const hasLastMinute = screen.lastMinute || false;
          
          // Always create single marker for fitBounds (double-sided screens use single marker with combined icon)
          markers.push(L.marker([screen.coordinates[0], screen.coordinates[1]]));
        });
        
        const group = new L.featureGroup(markers);
        map.fitBounds(group.getBounds().pad(0.1));
      }
    };

      // Add window function for screen selection
      if (typeof window !== 'undefined') {
        (window as any).selectScreen = (screenName: string) => {
          if (onSelectScreen) {
            onSelectScreen(screenName);
          }
        };
        
      }

    // Load Leaflet CSS and JS
      if (typeof window !== 'undefined') {
      // Load CSS
      if (!document.querySelector('link[href*="leaflet"]')) {
        const link = document.createElement('link');
        link.rel = 'stylesheet';
        link.href = 'https://unpkg.com/leaflet@1.9.4/dist/leaflet.css';
        document.head.appendChild(link);
      }

      // Add custom CSS for LED screen markers and popups
      if (!document.querySelector('#led-marker-styles')) {
        const style = document.createElement('style');
        style.id = 'led-marker-styles';
        style.textContent = `
          .led-screen-marker {
            background: transparent !important;
            border: none !important;
          }
          .led-screen-marker:hover {
            transform: scale(1.1);
            transition: transform 0.2s ease;
          }
          
          /* Uniform popup styling */
          .leaflet-popup-content-wrapper {
            border-radius: 8px !important;
            box-shadow: 0 4px 12px rgba(0,0,0,0.15) !important;
            padding: 0 !important;
            background: white !important;
          }
          
          .leaflet-popup-content {
            margin: 0 !important;
            padding: 0 !important;
            font-family: Inter, sans-serif !important;
            max-width: 780px !important;
            width: 780px !important;
          }
          
          .leaflet-popup-pane {
            background: transparent !important;
          }
          
          .leaflet-popup {
            background: transparent !important;
            box-shadow: none !important;
          }
          
          .leaflet-popup-content-wrapper {
            background: transparent !important;
            box-shadow: none !important;
          }
          
          .leaflet-popup-tip {
            background: transparent !important;
            box-shadow: none !important;
          }
          
          /* Special styling for double-sided popups */
          .leaflet-popup-content:has(div[style*="display: flex; gap: 5px"]) {
            max-width: 587px !important;
            width: 587px !important;
          }
          
          .leaflet-popup-tip {
            background: white !important;
            box-shadow: 0 4px 12px rgba(0,0,0,0.15) !important;
          }
          
          /* Info popup positioning - to the right of main popup */
          .info-popup .leaflet-popup-content-wrapper {
            margin-left: 296px !important; /* 291px (popup width) + 5px gap */
          }
          
          .info-popup .leaflet-popup-content {
            width: 291px !important;
            max-width: 291px !important;
          }
          
          .leaflet-popup-close-button {
            display: none !important;
          }
          
          /* Pulse animation for Last Minute badges */
          @keyframes pulse {
            0% {
              transform: translateY(-50%) scale(1);
              opacity: 1;
            }
            50% {
              transform: translateY(-50%) scale(1.1);
              opacity: 0.8;
            }
            100% {
              transform: translateY(-50%) scale(1);
              opacity: 1;
            }
          }
        `;
        document.head.appendChild(style);
      }

      // Load JS
      if (!(window as any).L) {
      const script = document.createElement('script');
      script.src = 'https://unpkg.com/leaflet@1.9.4/dist/leaflet.js';
      script.onload = initMap;
      document.head.appendChild(script);
      } else {
        initMap();
      }
    }

    return () => {
      if ((window as any).mapInstance) {
        (window as any).mapInstance.remove();
        (window as any).mapInstance = undefined;
      }
    };
  }, [selectedCity, selectedScreens]);

  return (
    <div className="w-full h-screen relative">
      {/* Filter Bar */}
      {(selectedCity || (selectedScreens && selectedScreens.length > 0)) && (
        <div className="absolute top-4 left-[66px] z-[1000] bg-white rounded-lg shadow-lg border border-gray-200 px-4 py-3 flex flex-col gap-3">
          <div className="flex items-center gap-3 flex-wrap">
            <div className="text-sm font-medium text-gray-700">Filtruojama:</div>
            {selectedCity && (
              <div className="bg-blue-100 text-blue-800 px-3 py-1 rounded-full text-sm font-medium">
                {selectedCity}
              </div>
            )}
            {selectedScreens && selectedScreens.map((screen, index) => (
              <div key={index} className="bg-green-100 text-green-800 px-3 py-1 rounded-full text-sm font-medium flex items-center gap-2">
                {screen}
                <button 
                  onClick={() => onSelectScreen && onSelectScreen(screen)}
                  className="text-green-600 hover:text-green-800 text-sm font-bold ml-1"
                  title="Išimti ekraną"
                >
                  ×
                </button>
              </div>
            ))}
            <button 
              onClick={onClearFilter}
              className="text-gray-400 hover:text-gray-600 text-sm"
            >
              ×
            </button>
          </div>
          
          {/* Date Range Mockup - Only show when screens are selected */}
          {selectedScreens && selectedScreens.length > 0 && (
            <div className="flex items-center gap-3 pt-2 border-t border-gray-100">
              <div className="text-sm font-medium text-gray-700">Reklamos periodas:</div>
          <div className="flex items-center gap-2">
                <input
                  type="date"
                  value={dateRange?.from || ''}
                  onChange={(e) => onDateRangeChange && onDateRangeChange(e.target.value, dateRange?.to || '')}
                  className="px-3 py-1 border border-gray-300 rounded text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
                  placeholder="Nuo"
                />
                <span className="text-gray-500 text-sm">iki</span>
                <input
                  type="date"
                  value={dateRange?.to || ''}
                  onChange={(e) => onDateRangeChange && onDateRangeChange(dateRange?.from || '', e.target.value)}
                  className="px-3 py-1 border border-gray-300 rounded text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
                  placeholder="Iki"
                />
          </div>
          </div>
          )}
        </div>
      )}
      
      <div
        ref={mapRef}
        className="w-full h-full"
        style={{
          background: '#f8f9fa'
        }}
      />
    </div>
  );
}